name: Docker Build and Publish

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: yesbhautik/public-api-scraper

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'

    steps:
      - name: Test container
        run: |
          docker pull ${{ env.IMAGE_NAME }}:latest
          docker run -d -p 3000:3000 --name test-container \
            -e GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
            ${{ env.IMAGE_NAME }}:latest
          
          # Wait for container to start
          sleep 10
          
          # Test if service is responding
          curl -f http://localhost:3000 || exit 1
          
          # Cleanup
          docker stop test-container
          docker rm test-container

  notify:
    runs-on: ubuntu-latest
    needs: [build-and-push, test]
    if: always()

    steps:
      - name: Notify success
        if: ${{ success() }}
        run: |
          echo "✅ Build and publish successful"
          echo "Image: ${{ env.IMAGE_NAME }}:latest"
          
      - name: Notify failure
        if: ${{ failure() }}
        run: |
          echo "❌ Build or tests failed"
          echo "Please check the logs for more details" 